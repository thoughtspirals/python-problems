class Graph:
    def __init__(self, edges):
        self.graph_dict = {}
        for start, end in edges:
            if start not in self.graph_dict:
                self.graph_dict[start] = []
            self.graph_dict[start].append(end)
        print("Graph Dict:", self.graph_dict)

    def get_paths(self, start, end, path=None):
        if path is None:
            path = []

        path.append(start)

        if start == end:
            return [path[:]] 

        if start not in self.graph_dict:
            return []

        paths = []
        for node in self.graph_dict[start]:
            if node not in path:  # Avoid cycles
                paths.extend(self.get_paths(node, end, path))

        path.pop()  # Backtrack to explore other paths
        return paths

    def get_shortest_path(self, start, end):
        queue = [[start]]  # Stores paths as lists

        while queue:
            path = queue.pop(0)  # Remove first path (FIFO behavior)
            node = path[-1]

            if node == end:
                return path

            if node in self.graph_dict:
                for neighbor in self.graph_dict[node]:
                    if neighbor not in path:  # Avoid cycles
                        queue.append(path + [neighbor])

        return None  # No path found

if __name__ == '__main__':
    routes = [
        ("Mumbai", "Paris"),
        ("Mumbai", "Dubai"),
        ("Paris", "Dubai"),
        ("Paris", "New York"),
        ("Dubai", "New York"),
        ("New York", "Toronto"),
    ]

    route_graph = Graph(routes)

    tests = [("Mumbai", "New York"), ("Dubai", "New York")]

    for start, end in tests:
        print(f"\nAll paths between {start} and {end}: {route_graph.get_paths(start, end)}")
        print(f"Shortest path between {start} and {end}: {route_graph.get_shortest_path(start, end)}")
