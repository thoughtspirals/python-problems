class Solution(object):
    def longestIncreasingPath(self, matrix):
        if not matrix or not matrix[0]:
            return 0
        
        m, n = len(matrix), len(matrix[0])
        directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]
        
        # Create a memoization table initialized to -1
        memo = [[-1] * n for _ in range(m)]
        
        def dfs(i, j):
            # If already computed, return the cached value
            if memo[i][j] != -1:
                return memo[i][j]

            best = 1  # Minimum path length is 1 (just the cell itself)
            for di, dj in directions:
                ni, nj = i + di, j + dj
                if 0 <= ni < m and 0 <= nj < n and matrix[ni][nj] > matrix[i][j]:
                    best = max(best, 1 + dfs(ni, nj))
            
            # Store the computed value before returning
            memo[i][j] = best
            return best
        
        # Run DFS from every cell and return the maximum path found
        return max(dfs(i, j) for i in range(m) for j in range(n))

# Example usage:
matrix = [
    [9, 9, 4],
    [6, 6, 8],
    [2, 1, 1]
]

solution = Solution()
print(solution.longestIncreasingPath(matrix))  # Output: 4
