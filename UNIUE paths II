def uniuePathWithObstacles(grid):
    m,n = len(grid), len(grid[0])
    
    #check if stating or ending point is blocked
    if grid[0][0] == 1 or grid[m-1][n-1] == 1:
        return 0
    
    #create a 2D dp array
    dp = [[0]*n for _ in range(m)]
    dp[0][0] = 1
    
    #iterate through the grid
    for i in range(m):
        for j in range(n):
            if grid[i][j] == 1:
                dp[i][j] = 0
            else:
                if i > 0:
                    dp[i][j] += dp[i-1][j]
                if j > 0:
                    dp[i][j] += dp[i][j-1]
                    
    return dp[m-1][n-1]

# Example usage
grid = [[0,0,0],[0,1,0],[0,0,1],[0,1,0],[0,0,0]]
result = uniuePathWithObstacles(grid)
print(result)  
