from collections import defaultdict
import heapq

class Twitter(object):

    def __init__(self):
        """Initialize data structures."""
        self.tweets = defaultdict(list)  # Maps userId -> List of (timestamp, tweetId)
        self.followers = defaultdict(set)  # Maps userId -> Set of followees
        self.timestamp = 0  # Global timestamp to maintain order

    def postTweet(self, userId, tweetId):
        """
        Composes a new tweet.
        """
        self.tweets[userId].append((self.timestamp, tweetId))
        self.timestamp += 1  # Increase timestamp to maintain ordering

    def getNewsFeed(self, userId):
        """
        Retrieves the 10 most recent tweets from the user and their followees.
        """
        min_heap = []
        
        # Collect the user's tweets
        for tweet in self.tweets[userId]:
            heapq.heappush(min_heap, tweet)
            if len(min_heap) > 10:
                heapq.heappop(min_heap)

        # Collect tweets from followees
        for followee in self.followers[userId]:
            for tweet in self.tweets[followee]:
                heapq.heappush(min_heap, tweet)
                if len(min_heap) > 10:
                    heapq.heappop(min_heap)

        # Extract tweets from the heap in descending order
        return [tweetId for _, tweetId in sorted(min_heap, reverse=True)]

    def follow(self, followerId, followeeId):
        """
        Follower follows the followee.
        """
        if followerId != followeeId:  # Users cannot follow themselves
            self.followers[followerId].add(followeeId)

    def unfollow(self, followerId, followeeId):
        """
        Follower unfollows the followee.
        """
        self.followers[followerId].discard(followeeId)  # Removes safely

# Example usage
twitter = Twitter()

# User 1 posts a tweet (id = 5)
twitter.postTweet(1, 5)

# User 1's news feed should return [5]
print(twitter.getNewsFeed(1))  # Output: [5]

# User 1 follows user 2
twitter.follow(1, 2)

# User 2 posts two tweets (id = 6 and 7)
twitter.postTweet(2, 6)
twitter.postTweet(2, 7)

# User 1's news feed should return [7, 6, 5]
print(twitter.getNewsFeed(1))  # Output: [7, 6, 5]

# User 1 unfollows user 2
twitter.unfollow(1, 2)

# Now User 1's feed should only have their own tweets
print(twitter.getNewsFeed(1))  # Output: [5]
